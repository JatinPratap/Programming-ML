import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
animals = pd.read_csv('horse.csv')
target = animals['outcome']
animals.head()
target.value_counts()
sns.heatmap(animals.isnull(), cmap="viridis") 
animals = animals.drop(['outcome'],axis=1)
animals.info()
category_variables = ['surgery', 'age', 'temp_of_extremities','peripheral_pulse',
       'mucous_membrane', 'capillary_refill_time', 'pain', 'peristalsis',
       'abdominal_distention', 'nasogastric_tube', 'nasogastric_reflux', 'rectal_exam_feces', 'abdomen',
      'abdomo_appearance', 'surgical_lesion','cp_data']

#one hot encoding

for category in category_variables:
    animals[category] = pd.get_dummies(animals[category])
#we dont really have to replace anything as the datatype would be uint8 instead of object
animals.info()

animals[category]

animals.head()

#LabelEncoder

from sklearn.preprocessing import LabelEncoder

X, y = animals.values,target.values

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

#it will get the missing values and for Categorical VAR, we use strategy of 'most_frequent (mode)' , where contionous values we use "Mean" or "Median"
#we will set missing values "nan" in terms of NP, else it will be passed as String

from sklearn.impute import SimpleImputer

imp = SimpleImputer(missing_values=np.nan,strategy='most_frequent')
X_train = imp.fit_transform(X_train)
X_test = imp.fit_transform(X_test)

#Testing for missing values now
X_train_CH = pd.DataFrame(X_train)
sns.heatmap(X_train_CH .isnull(), cmap="magma") 


enum_df = Data.select_dtypes(include=['object'])
num_df = Data.select_dtypes(exclude=['object'])
num_df = num_df.loc[:, num_df.var() == 0.0]
Data = pd.concat([num_df, enum_df], axis=1)

from sklearn.tree import DecisionTreeClassifier
#you can play around with the model
classifier1 = DecisionTreeClassifier()
classifier1.fit(X_train,y_train)
y_predict = classifier1.predict(X_test)
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_predict)
from sklearn.metrics import classification_report

print(classification_report(y_test,y_predict))

#If Logistics regression used for the non binary levels problem - low results
------------------------------------------------------------------------

from sklearn.linear_model import LogisticRegression
lr_classifier = LogisticRegression()
lr_classifier.fit(X_train,y_train)

C:\Users\officeuser\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:762: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(


LogisticRegression()
y_preds_LR
y_preds_LR = lr_classifier.predict(X_test)
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_preds_LR)

0.48333333333333334
