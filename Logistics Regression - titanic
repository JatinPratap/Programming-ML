import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matlplotlib in line 
import math

data1 = pd.read_csv('File Path')
len(data.index)
data1.isnull().sum()
#we use heatmap to get the idea on missing values at what level

sns.heatmap(data1.corr(), annot=True,  cmap="viridis") #annot will get the values for the fucntion

sns.heatmap(data1.isnull(), cmap="viridis") #viridis is basically for colour coding

print("Null values:", data1['Age'].isnull().sum())
zscore = (data1.Age - data1.Age.mean()) / data1.Age.std()
#If the z score > 3, Such a data point can be an outlier
outliers = zscore.loc[abs(zscore) > 3]
print("Outlier count:", len(outliers))


#using the dummies from pandas to get the data of catagorical in numerical format for ML applcaition 
sex=pd.get_dummies(data1["Sex"], drop_first=True)
embark=pd.get_dummies(data1["Embarked"], drop_first=True)
Pclass=pd.get_dummies(data1["Pclass"], drop_first=True)
data1= pd.concat([data1,sex,pclass,embark],axis=1)
data1.drop(["Sex","Embarked","Ticket"],axis=1)

#DATA_Analysis
sns.catplot(x='Survived', col='Embarked', kind='count', data=data1);
#very good for Categorical var and numeric/discrete comprasion 
sns.countplot(x="Survived", data = data1)
sns.countplot(x="Survived", hue = "Sex", data = data1)
sns.countplot(x="Survived", hue = "Pclass", data = data1)
data1["Age"].plot.hist()
data1["Age"].p'lot.hist(bins=20, figsize=(10,5))
sns.boxplot(x="Pclass", y="Age", data = data1)

X=data1.drop("Survived",axis=1)
Y= data1["Survived"]
from sklearn.model_selection import train_test_split 
X_train,X_test,y_train,y_test = train_test_split(X,y, test_size = 0.2, random_state =0)
from sklearn.linear_model import LogisticRegression
logmodel=LogisticRegression()
logmodel.fit(X_train,y_train)
predictions = logmodel.predict(X_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,predictions)

from sklearn.metrics import classification_report
print(classification_report(y_test,predictions))

from sklearn.metrics import accuracy_score
accuracy_score(y_test,predictions)*100
